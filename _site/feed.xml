<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xia焱 Blog</title>
    <description>关于程序与设计</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 27 Nov 2019 10:17:39 +0800</pubDate>
    <lastBuildDate>Wed, 27 Nov 2019 10:17:39 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Android 使用RecycleView自定义日历签到效果</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“每天进步一点点！ ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;最近公司又要求做一个签到日历效果，我为啥加个又是之前我实现了一个日历签到效果，而这次我使用的则是RecycleView去实现。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#build&quot;&gt;跳过废话，直接看技术实现 &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;公司最近要求弄个签到的送积分的东西，我在18年年末的时候曾经写了一个，然后因为没有产品加上UI的一些“想法”我之前实现的那个签到日历无法满足，他这个定制化的需求，最要命的是需求总变。&lt;/p&gt;

&lt;p id=&quot;build&quot;&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;效果图&quot;&gt;效果图&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/icon_zs.gif&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;实现思路&quot;&gt;实现思路&lt;/h2&gt;

&lt;p&gt;初始化日历数据，把数据传入到适配器中并显示。
至于左右滑动页面刷新，重写RecyclerView的onTouchEvent方法，监听手势的改变，然后更改list数据，重新显示UI。&lt;/p&gt;

&lt;h2 id=&quot;核心代码&quot;&gt;核心代码&lt;/h2&gt;

&lt;p&gt;CalendarTool 这个工具类确实不错，可以获取正确的日期，很棒的算法可以减少大家不必要的时间。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;``` 
public class CalendarTool&amp;lt;T extends BaseDateEntity&amp;gt; {

private final String TAG = CalendarTool.class.getSimpleName();

public static int FLING_MIN_DISTANCE = 100;

private final int[] weekDayRow = {0, 1, 2, 3, 4, 5, 6};

private ArrayList&amp;lt;DateEntity&amp;gt; mDataList = new ArrayList&amp;lt;&amp;gt;();//日期数组
private ArrayList&amp;lt;T&amp;gt; mRecordList;//事件记录数组
private DateEntity   mDateEntity;
private int          mYear;
private int          mMonth;

private boolean mEndBelong;
private boolean mStartBelong;
private int     mStartDay;
private int     mEndDay;

/**
 * 当前年月日
 */
private int mCurrenYear;
private int mCurrenMonth;
private int mCurrenDay;

/**
 * 平年月天数数组
 */
int commonYearMonthDay[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
/**
 * 闰年月天数数组
 */
int leapYearMonthDay[]   = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

public CalendarTool() {
	/** 初始化当前系统的日期 */
	Calendar calendar = Calendar.getInstance();
	mCurrenYear = calendar.get(Calendar.YEAR);
	mCurrenMonth = calendar.get(Calendar.MONTH) + 1;
	mCurrenDay = calendar.get(Calendar.DAY_OF_MONTH);
	this.mYear = mCurrenYear;
	this.mMonth = mCurrenMonth;
}

/**
 * 获取当前日历的年月 x为年，y为月
 */
public Point getNowCalendar() {
	Point p = new Point(mYear, mMonth);
	return p;
}

/**
 * 判断第一天属不属于本月
 */
public boolean isStartBelong() {
	return mStartBelong;
}

/**
 * 判断最后一天属不属于本月
 */
public boolean isEndBelong() {
	return mEndBelong;
}

/**
 * 获取日历第一天的日期
 */
public int getStartDay() {
	return mStartDay;
}

/**
 * 获取日历最后一天的日期
 */
public int getEndDay() {
	return mEndDay;
}

public ArrayList&amp;lt;DateEntity&amp;gt; initDateList() {
	return initDateList(mYear, mMonth);
}

public void initRecordList(ArrayList&amp;lt;T&amp;gt; recordList) {
	mRecordList = recordList;
}

/**
 * 通过年月获取当前页面的日期集合
 */
private ArrayList&amp;lt;DateEntity&amp;gt; initDateList(int year, int month) {

	Log.i(TAG, &quot;initDateList: year = &quot; + year + &quot; month = &quot; + month);

	mDataList.clear();

	/** 修改部分 */
	int endDate = 0;// 得到上一个月的天数，作为上一个月在本日历的结束日期
	if ((year - 1) == this.mYear || month == 1) {// 说明向前翻了一年，那么上个月的天数就应该是上一年的12月的天数，或者到翻到一月份的时候，那么上一个月的天数也是上一年的12月份的天数
		endDate = this.getDays(year - 1, 12);
	} else {// 得到上一个月的天数，作为上一个月在本日历的结束日期
		endDate = this.getDays(year, month - 1);
	}
	/** 修改部分结束 */

	this.mYear = year;// 当前日历上显示的年
	this.mMonth = month;// 当前日历上显示的月

	int days = this.getDays(year, month);// 得到本月的总共天数
	int dayOfWeek = this.getWeekDay(year, month);//得到当前年月的第一天为星期几
	int selfDaysEndWeek = 0;// 本月的最后一天是星期几

	mStartBelong = true;

	/** 先添加前面不属于本月的 */
	if (dayOfWeek != 0) {
		int startDate = endDate - dayOfWeek + 1;// 当前月的上一个月在本日历的开始日期
		for (int i = startDate, j = 0; i &amp;lt;= endDate; i++, j++) {

			mDateEntity = new DateEntity(year, month - 1, i);
			mDateEntity.date = mDateEntity.year * 10000 + mDateEntity.month * 100 + i;
			if (startDate == i) {
				mStartBelong = false;
				mStartDay = mDateEntity.date;
			}

			mDateEntity.isSelfMonthDate = false;
			mDateEntity.weekDay = weekDayRow[j];
			mDateEntity.hasRecord = hasRecord(mDateEntity.date);
			mDataList.add(mDateEntity);
		}
	}

	/** 添加本月的 */
	for (int i = 1, j = dayOfWeek; i &amp;lt;= days; i++, j++) {

		mDateEntity = new DateEntity(year, month, i);
		mDateEntity.date = mDateEntity.year * 10000 + mDateEntity.month * 100 + i;
		if (mStartBelong &amp;amp;&amp;amp; i == 1) {
			mStartDay = mDateEntity.date;
		}
		if (i == days) {
			mEndDay = mDateEntity.date;
		}
		mDateEntity.isSelfMonthDate = true;
		if (j &amp;gt;= 7) {
			j = 0;
		}
		selfDaysEndWeek = j;
		mDateEntity.weekDay = weekDayRow[j];
		if (year == mCurrenYear &amp;amp;&amp;amp; month == mCurrenMonth &amp;amp;&amp;amp; i == mCurrenDay) {
			mDateEntity.isNowDate = true;
		}
		mDateEntity.hasRecord = hasRecord(mDateEntity.date);
		mDataList.add(mDateEntity);
	}

	mEndBelong = true;

	/*** 添加后面下一个月的 */
	for (int i = 1, j = selfDaysEndWeek + 1; i &amp;lt; 7; i++, j++) {

		if (j &amp;gt;= 7) {
			break;
		}
		mEndBelong = false;

		mDateEntity = new DateEntity(year, month + 1, i);

		if (mDateEntity.month &amp;gt; 12) {
			mDateEntity.year = year + 1;
			mDateEntity.month = 1;
		}
		mDateEntity.date = mDateEntity.year * 10000 + mDateEntity.month * 100 + i;
		mDateEntity.isSelfMonthDate = false;
		mDateEntity.weekDay = weekDayRow[j];
		mDateEntity.hasRecord = hasRecord(mDateEntity.date);
		mDataList.add(mDateEntity);

		mEndDay = mDateEntity.year * 10000 + mDateEntity.month * 100 + i;
	}
	return mDataList;
}

/**
 * 通过年月，获取这个月一共有多少天
 */
private int getDays(int year, int month) {
	int days = 0;

	if ((year % 4 == 0 &amp;amp;&amp;amp; (year % 100 != 0)) || (year % 400 == 0)) {
		if (month &amp;gt; 0 &amp;amp;&amp;amp; month &amp;lt;= 12) {
			days = leapYearMonthDay[month - 1];
		}
	} else {
		if (month &amp;gt; 0 &amp;amp;&amp;amp; month &amp;lt;= 12) {
			days = commonYearMonthDay[month - 1];
		}
	}
	return days;
}

private boolean hasRecord(int date) {
	if (mRecordList != null) {
		for (T baseDateEntity : mRecordList) {
			if (baseDateEntity.year * 10000 + baseDateEntity.month * 100 + baseDateEntity.day == date) {
				return true;
			}
		}
	}
	return false;
}

/**
 * 通过年，月获取当前月的第一天为星期几 ，返回0是星期天，1是星期一，依次类推
 */
private int getWeekDay(int year, int month) {
	int dayOfWeek;
	int goneYearDays = 0;
	int thisYearDays = 0;
	boolean isLeapYear = false;//闰年
	int commonYearMonthDay[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
	int leapYearMonthDay[] = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
	for (int i = 1900; i &amp;lt; year; i++) {// 从1900年开始算起，1900年1月1日为星期一
		if ((i % 4 == 0 &amp;amp;&amp;amp; (i % 100 != 0)) || (i % 400 == 0)) {
			goneYearDays = goneYearDays + 366;
		} else {
			goneYearDays = goneYearDays + 365;
		}
	}
	if ((year % 4 == 0 &amp;amp;&amp;amp; (year % 100 != 0)) || (year % 400 == 0)) {
		isLeapYear = true;
		for (int i = 0; i &amp;lt; month - 1; i++) {
			thisYearDays = thisYearDays + leapYearMonthDay[i];
		}
	} else {
		isLeapYear = false;
		for (int i = 0; i &amp;lt; month - 1; i++) {
			thisYearDays = thisYearDays + commonYearMonthDay[i];
		}
	}
	dayOfWeek = (goneYearDays + thisYearDays + 1) % 7;

	Log.d(this.getClass().getName(), &quot;从1990到现在有&quot; + (goneYearDays + thisYearDays + 1) + &quot;天&quot;);
	Log.d(this.getClass().getName(), year + &quot;年&quot; + month + &quot;月&quot; + 1 + &quot;日是星期&quot; + dayOfWeek);
	return dayOfWeek;
}

public void flushDate(float distance_x) {
	if (distance_x &amp;lt; 0) {// Fling right
		if (mMonth + 1 &amp;gt; 12) {
			mDataList = initDateList(mYear + 1, 1);
		} else {
			mDataList = initDateList(mYear, mMonth + 1);
		}
	} else {// Fling left
		if (mMonth - 1 &amp;lt;= 0) {
			mDataList = initDateList(mYear - 1, 12);
		} else {
			mDataList = initDateList(mYear, mMonth - 1);
		}
	}
} }



``` 


initDateList方法，会根据当前传入的年月数据来计算当前日历该显示的数据。
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;因为我的需求是点击按钮完成签到即可，不用点击日历中的日期（item），只需要把 当前的日期传入即可&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;``` 
Calendar calendar = Calendar.getInstance();
list.add(new BaseDateEntity(calendar.get(Calendar.YEAR), (calendar.get(Calendar.MONTH) + 1),calendar.get(Calendar.DAY_OF_MONTH)));
rcDate.initRecordList(list);

``` 

initRecordList 已经封装adapter刷新，不用担心传值后没有刷新。
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个Demo即使是新手直接可以使用，省去了大家阅读的时间，毕竟大家的时间宝贵。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/XiaYan24/SignCalendar&quot;&gt;GitHub源码地址&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 11 Oct 2019 18:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/10/11/sign/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/10/11/sign/</guid>
        
        <category>自定义</category>
        
        <category>Android</category>
        
        
      </item>
    
      <item>
        <title>直接调用阿里云视频点播API实现视频播放</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“每天进步一点点！”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;17年的时候公司让我要实现一个视频播放的功能，正常是不需要移动端调用阿里云视频API的，这件事是由后台来完成的。但是公司那会后台没时间我就给实现了。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#build&quot;&gt;跳过废话，直接看技术实现 &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;后来经过了半年左右CSDN的这篇博客被查阅的次数超过了6000次我觉得有必要重新整理一下了，梳理一下，以便帮助需要的人。&lt;/p&gt;

&lt;p id=&quot;build&quot;&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;正文&quot;&gt;正文&lt;/h2&gt;

&lt;p&gt;先来看一眼官方的&lt;a href=&quot;https://help.aliyun.com/document_detail/44435.html?spm=5176.product29932.6.618.DUYkdb&quot;&gt;API调用文档&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;有人会说了你直接扔出个阿里云的API你这不是搞笑吗？少侠勿急，且听我细细道来。&lt;/p&gt;

&lt;p&gt;【调用流程】
	想使用阿里云GET请求需要你一些参数，我这里以获取阿里云获取视频列表的接口为例&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http://vod.cn-shanghai.aliyuncs.com/?Action=GetVideoList&amp;amp;Status=Normal&amp;amp;Format=JSON&amp;amp;&amp;lt;公共参数&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/xy_ali.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;公共参数要数 签名结果串最难搞定的，重点要说这个。&lt;/p&gt;

&lt;h2 id=&quot;签名的配置及其步骤&quot;&gt;签名的配置及其步骤&lt;/h2&gt;

&lt;p&gt;【0】 我把一些参数都暴露，让大家看的更清晰，当然AccessSecret   AccessKey 都是不对的但是字符位数相同&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;private String WJ_Home_AccessKey = &quot;LTAIPuR8IfTyWIan&quot;;
private String WJ_Home_AccessSecret = &quot;PW0mx2aGuhGhYHj7qeXtisQ9Skjbvq&quot;;
private String playKey = &quot;ex491ux1dof8qnpu2n99k88n9uphb4kyr4wgq62ws1dawxcnusthjgfob935838t&quot;;
private static final String ISO8601_DATE_FORMAT = &quot;yyyy-MM-dd'T'HH:mm:ss'Z'&quot;;
private String CateId = &quot;274011476&quot;; //这个是视频分类ID，可以填默认-1
final String HTTP_METHOD = &quot;GET&quot;;
final String SEPARATOR = &quot;&amp;amp;&quot;;
final String EQUAL = &quot;=&quot;;
private static final String ENCODE_TYPE = &quot;UTF-8&quot;;
private String Timestamp = formatIso8601Date(new Date());
private String SignatureNonce = UUID.randomUUID().toString();
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;【1】生成签名的过程&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Map&amp;lt;String, String&amp;gt; parameterMapX = new HashMap&amp;lt;String, String&amp;gt;();
//=============7大公共参数========================
parameterMapX.put(&quot;Format&quot;, &quot;JSON&quot;);
parameterMapX.put(&quot;Version&quot;, &quot;2017-03-21&quot;);
parameterMapX.put(&quot;SignatureMethod&quot;, &quot;HMAC-SHA1&quot;);
parameterMapX.put(&quot;SignatureVersion&quot;, &quot;1.0&quot;);
parameterMapX.put(&quot;AccessKeyId&quot;, WJ_Home_AccessKey);
parameterMapX.put(&quot;Timestamp&quot;, Timestamp);
parameterMapX.put(&quot;SignatureNonce&quot;, SignatureNonce);
//=============分割线下的是特有参数===============
parameterMapX.put(&quot;Action&quot;, &quot;GetVideoList&quot;);
parameterMapX.put(&quot;PageNo&quot;, &quot;1&quot;);
parameterMapX.put(&quot;PageSize&quot;, &quot;10&quot;);
parameterMapX.put(&quot;CateId&quot;, CateId);
List&amp;lt;String&amp;gt; sortedKeys = new ArrayList&amp;lt;String&amp;gt;(parameterMapX.keySet());
Collections.sort(sortedKeys);
//开始生成签名
String PuR8IfTyWIan = GoToSign(sortedKeys, parameterMapX);
//网络请求 请求视频列表
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;【3-1】计算ISO8601时间方法&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;``` 
private static String formatIso8601Date(Date date) {
    SimpleDateFormat df = new SimpleDateFormat(ISO8601_DATE_FORMAT);
    df.setTimeZone(new SimpleTimeZone(0, &quot;GMT&quot;));
    return df.format(date);
}

``` 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;【3-2】转码工具类&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;	``` 
private static String percentEncode(String value) {
    if (value == null) return null;
    try {
        return URLEncoder.encode(value, ENCODE_TYPE).replace(&quot;+&quot;, &quot;%20&quot;).replace(&quot;*&quot;, &quot;%2A&quot;).replace(&quot;%7E&quot;, &quot;~&quot;);
    } catch (UnsupportedEncodingException e) {
        e.printStackTrace();
    }
    return value;
}


``` 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;【3-3】hmac_sha1算法&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;	``` 
private String hmac_sha1(String key, String datas) {
    String reString = &quot;&quot;;

    try {
        byte[] data = key.getBytes(&quot;UTF-8&quot;);
        //根据给定的字节数组构造一个密钥,第二参数指定一个密钥算法的名称
        SecretKey secretKey = new SecretKeySpec(data, &quot;HmacSHA1&quot;);
        //生成一个指定 Mac 算法 的 Mac 对象
        Mac mac = Mac.getInstance(&quot;HmacSHA1&quot;);
        //用给定密钥初始化 Mac 对象
        mac.init(secretKey);

        byte[] text = datas.getBytes(&quot;UTF-8&quot;);
        //完成 Mac 操作
        byte[] text1 = mac.doFinal(text);

        reString = Base64.encodeToString(text1, Base64.DEFAULT);

    } catch (Exception e) {
        // TODO: handle exception
    }

    return reString;
}

``` 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;【3-4】签名方法   这里我把获取签名封装成了一个方法，更方便大家的使用&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;	``` 
private String GoToSign(List&amp;lt;String&amp;gt; sortedKeys, Map&amp;lt;String, String&amp;gt; parameterMap) {
    StringBuilder stringToSign = new StringBuilder();
    stringToSign.append(HTTP_METHOD).append(SEPARATOR);
    stringToSign.append(percentEncode(&quot;/&quot;)).append(SEPARATOR);
    StringBuilder QueryString = new StringBuilder();
    for (String key : sortedKeys) {
        // 此处需要对key和value进行编码
        String value = parameterMap.get(key);
        QueryString.append(SEPARATOR).append(percentEncode(key)).append(EQUAL).append(percentEncode(value));
		  //  append的拼接样式 请看 【4-1】
    }
    StringBuilder append = stringToSign.append(percentEncode(QueryString.toString().substring(1)));
    String PuR8IfTyWIan = hmac_sha1(WJ_Home_AccessSecret + &quot;&amp;amp;&quot;, append.toString()).trim();
	  //  PuR8IfTyWIan 样式 请看 【4-2】
    return PuR8IfTyWIan;
}


``` 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;【4-1】append 的拼接样式&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GET&amp;amp;%2F&amp;amp;AccessKeyId%3DLTAIPuR8IfTyWIan%26Action%3DGetVideoPlayAuth%26Format%3DJSON%26SignatureMethod%3DHMAC-SHA1%26SignatureNonce%3D578a50c1-280d-4a34-bffc-e0sda6b2df76%26SignatureVersion%3D1.0%26Timestamp%3D2017-08-11T08%253A56%253A39Z%26Version%3D2017-03-21%26VideoId%3D86d0a02dfccc46bab045d954e6b70036&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;【4-2】PuR8IfTyWIan的样式&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;9or7epLWdsgMIvtRlJZm57HpBGs=&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;最后我强调一点 就是拼接URL这一点（我在拼接的时候没有进行转码，也能请求成功！）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我的URL
   &lt;code class=&quot;highlighter-rouge&quot;&gt;http://vod.cn-shanghai.aliyuncs.com?Signature=7K0h2pa/JS4KdC6XEKiYrw7a3EU=&amp;amp;SignatureNonce=bb8d6d93-e56c-4e76-b7d8-f4be3490b7e6&amp;amp;Format=JSON&amp;amp;CateId=133999353&amp;amp;SignatureMethod=HMAC-SHA1&amp;amp;Timestamp=2017-08-13T13%3A15%3A22Z&amp;amp;SignatureVersion=1.0&amp;amp;Action=GetVideoList&amp;amp;Version=2017-03-21&amp;amp;PageNo=1&amp;amp;PageSize=10&amp;amp;AccessKeyId=LTAIPuR8IfTyWIan&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;阿里云的URL
   &lt;code class=&quot;highlighter-rouge&quot;&gt;http://vod.cn-shanghai.aliyuncs.com?Signature=UI%2FwKfuvTtphzCKHwPhP0ErtLnc%3D&amp;amp;SignatureVersion=1.0&amp;amp;Action=GetVideoPlayAuth&amp;amp;Format=JSON&amp;amp;VideoId=68a4d2629a339db3207963ac073a88cd&amp;amp;SignatureNonce=578a50c1-280d-4a34-bffc-e06aa6b2df76&amp;amp;Version=2017-03-21&amp;amp;AccessKeyId=testId&amp;amp;SignatureMethod=HMAC-SHA1&amp;amp;Timestamp=2017-03-29T12%3A09%3A11Z&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;有人就会说了为什么你不跟着阿里爸爸方法走呢？ 我也想跟着阿里爸爸走啊，条件不允许啊！
经过hmac_sha1我的转码后的签名&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; `UI%2QcKDaeGtplzCJHwPhP0ErtLnc%3DOA`
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;阿里云的转码后的签名&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; `UI%2FwKfuvTtphzCKHwPhP0ErtLnc%3D`
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为什么没有跟阿里爸爸的方法走，是因为我转码过后就多出个0A,如果按照阿里云的调用方式最后等待我的结果只有 &lt;strong&gt;SignatureDoesNotMatch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;阿里API给的方法是这样的&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;	``` 
 // 生成请求URL
	StringBuilder requestURL;
	requestURL = new StringBuilder(&quot;http://vod.cn-shanghai.aliyuncs.com?&quot;);
	requestURL.append(URLEncoder.encode(&quot;Signature&quot;, ENCODE_TYPE)).append(&quot;=&quot;).append(signature);
	for (Map.Entry&amp;lt;String, String&amp;gt; e : parameterMap.entrySet()) {
	requestURL.append(&quot;&amp;amp;&quot;).append(percentEncode(e.getKey())).append(&quot;=&quot;).append(percentEncode(e.getValue()));


``` 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;因为它把集合中的数据进行了转码，当生成了URL，你对这个url进行请求的时候&lt;strong&gt;InvalidTimeStamp.Format时间戳格式不对&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;【解决办法】&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; `requestURL.append(&quot;&amp;amp;&quot;).append(e.getKey()).append(&quot;=&quot;).append(e.getValue());`
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;【网络请求】 我这里用的是nohttp  参数都放上就OK了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/xy_ali_q.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;希望这篇博客可以帮助到你&lt;/p&gt;

</description>
        <pubDate>Fri, 12 Apr 2019 06:46:00 +0800</pubDate>
        <link>http://localhost:4000/2019/04/12/%E7%9B%B4%E6%8E%A5%E8%B0%83%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E8%A7%86%E9%A2%91%E7%82%B9%E6%92%ADAPI%E5%AE%9E%E7%8E%B0%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE-2019/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/04/12/%E7%9B%B4%E6%8E%A5%E8%B0%83%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E8%A7%86%E9%A2%91%E7%82%B9%E6%92%ADAPI%E5%AE%9E%E7%8E%B0%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE-2019/</guid>
        
        <category>视频</category>
        
        <category>Android</category>
        
        
      </item>
    
      <item>
        <title>Hello 2019</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“Yeah It’s on. ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;我的 Blog 就这么开通了。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#build&quot;&gt;跳过废话，直接看技术实现 &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2019 年，终于配置了自己的博客，可惜地址还没有自己的服务器，等腾讯云便宜的时候入手一下。&lt;/p&gt;

&lt;p&gt;之前很多大牛都说一定要有自己的博客，要自己运营自己平台。今天总弄好了这个博客，弄了一天多的时间看见成果的时候觉得一切都是值得的。嘿嘿&lt;/p&gt;

&lt;p id=&quot;build&quot;&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;正文&quot;&gt;正文&lt;/h2&gt;

&lt;p&gt;接下来说说搭建这个博客的技术细节。&lt;/p&gt;

&lt;p&gt;正好之前就有关注过 &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; + &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; 快速 Building Blog 的技术方案，非常轻松时尚。&lt;/p&gt;

&lt;p&gt;其优点非常明显：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Markdown&lt;/strong&gt; 带来的优雅写作体验&lt;/li&gt;
  &lt;li&gt;非常熟悉的 Git workflow ，&lt;strong&gt;Git Commit 即 Blog Post&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;利用 GitHub Pages 的域名和免费无限空间，不用自己折腾主机
    &lt;ul&gt;
      &lt;li&gt;如果需要自定义域名，也只需要简单改改 DNS 加个 CNAME 就好了&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Jekyll 的自定制非常容易，基本就是个模版引擎&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;github--jekyll-配置属于自己的博客&quot;&gt;Github + Jekyll 配置属于自己的博客&lt;/h2&gt;

&lt;p&gt;(1) 没有GitHub账号的先申请个GitHub账号，然后创建项目就像这样 ↓
&lt;img src=&quot;/img/in-post/xy_a.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;浏览器里访问https://xiayan24.github.io/,可以发现这个url可以被访问了，你可以把改仓库拉取到本地，然后在里面新建一个index.html的文件,在里面输入任意内容，然后再把代码推送到git上，然后再访问改链接，可以发现index.html里面的内容被访问到了。
到这里，一个免费且无限流量的github代码托管仓库就创建完成了&lt;/p&gt;

&lt;p&gt;(2) 项目创建完成后，开始Jekyll的安装(我是Windows系统)&lt;/p&gt;

&lt;p&gt;[1] 首先下载并安装&lt;a href=&quot;https://rubyinstaller.org/&quot;&gt;Ruby installer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[2 ]点击下载&lt;a href=&quot;https://rubygems.org/pages/download&quot;&gt;RubyGems&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[3] 在命令行执行gem install jekyll&lt;/p&gt;

&lt;p&gt;[4] 安装完成，我们可以用jekyll命令创建一个博客模板,打开命令行执行&lt;/p&gt;

&lt;p&gt;(3) 运行一下 jekyll server&lt;/p&gt;

 	``` 
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;cd e:
e:
jekyll new testblog
cd testblog
jekyll server
在浏览器输入http://127.0.0.1:4000/即可浏览刚刚创建的blog
``` 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;运行成功之后显示 ↓
   &lt;img src=&quot;/img/in-post/xy_b.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(4) Jekyll 主题选择,可以去GitHub上去寻找或者去百度一下Jekyll模板，这里介绍2个不错的网站 &lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;jekyllthemes&lt;/a&gt;、&lt;a href=&quot;https://jekyll-themes.com/&quot;&gt;jekyll-themes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(5) Jekyll 目录结构&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;_posts 博客内容
_pages 其他需要生成的网页，如About页
_layouts 网页排版模板
_includes 被模板包含的HTML片段，可在_config.yml中修改位置
assets 辅助资源 css布局 js脚本 图片等
_data 动态数据
_sites 最终生成的静态网页
_config.yml 网站的一些配置信息
index.html 网站的入口
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(6) 修改_config.yml 替换成自己的信息就OK了&lt;/p&gt;

</description>
        <pubDate>Tue, 19 Mar 2019 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/03/19/hello-2019/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/03/19/hello-2019/</guid>
        
        <category>生活</category>
        
        <category>Meta</category>
        
        
      </item>
    
  </channel>
</rss>
